---
- name: "Conf:cfg_file: Debug"
  ansible.builtin.debug:
    var: bsd_nagios_conf_cfg_files
  when: bsd_nagios_debug|bool

- name: "Conf:cfg_file: Configure options cfg_file in nagios.cfg"
  ansible.builtin.lineinfile:
    dest: "{{ bsd_nagios_conf_path }}/nagios.cfg"
    regexp: ^\s*#*\s*cfg_file\s*=\s*{{ item.file }}\s*$
    line: cfg_file={{ item.file }}
    backup: "{{ bsd_nagios_backup_conf }}"
  loop: "{{ bsd_nagios_conf_cfg_files }}"
  loop_control:
    label: "{{ item.file }} {{ item.present | d(true) | bool }}"
  when: item.present|d(true)|bool
  notify:
    - verify nagios
    - reload nagios

- name: "Conf:cfg_file: Remove options cfg_file from nagios.cfg"
  ansible.builtin.lineinfile:
    dest: "{{ bsd_nagios_conf_path }}/nagios.cfg"
    regexp: ^\s*#*\s*cfg_file\s*=\s*{{ item.file }}\s*$
    line: "# cfg_file={{ item.file }}"
    backup: "{{ bsd_nagios_backup_conf }}"
  loop: "{{ bsd_nagios_conf_cfg_files }}"
  loop_control:
    label: "{{ item.file }} {{ item.present | d(true) | bool }}"
  when: not item.present|d(true)|bool
  notify:
    - verify nagios
    - reload nagios

- name: "Conf:cfg_file: Configure nagios objects"
  ansible.builtin.copy:
    dest: "{{ item.file }}"
    mode: "{{ item.mode | d(omit) }}"
    content: |
      {% for object in item.objects %}
      {% if object.state | d('present') == 'present' %}
      define {{ object.name }} {
      {% for option in object.conf %}
              {{ option.key }} {{ option.val }}
      {% endfor %}
      }
      {% endif %}

      {% endfor %}

    backup: "{{ bsd_nagios_backup_conf }}"
  loop: "{{ bsd_nagios_conf_cfg_files }}"
  loop_control:
    label: "{{ item.file | dirname | basename }} {{ item.file | basename }} {{ item.present }}"
  when: item.objects|length > 0
  notify:
    - verify nagios
    - reload nagios

# Note: Validate does not work. Optional path to config not available.
# validate: "{{ bsd_nagios_program }} -v %s"
# msg: 'failed to validate: rc:1 error:'

# EOF

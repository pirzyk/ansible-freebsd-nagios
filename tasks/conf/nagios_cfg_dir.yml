---
  # Configure cfg_dir in nagios.cfg
- name: "Conf:cfg_dir: Debug bsd_nagios_debug={{ bsd_nagios_debug }}"
  when: bsd_nagios_debug | bool
  ansible.builtin.debug:
    var: bsd_nagios_conf_cfg_dirs

- name: "Conf:cfg_dir: Create cfg_dir"
  when: item.present | d(true) | bool
  ansible.builtin.file:
    state: directory
    path: "{{ item.cfg_dir }}"
    mode: "0755"
  loop: "{{ bsd_nagios_conf_cfg_dirs }}"

- name: Configure cfg_dir in nagios.cfg
  notify: [verify nagios, reload nagios]
  block:

    - name: "Conf:cfg_dir: Configure options cfg_dir in nagios.cfg"
      when: item.present | d(true)
      ansible.builtin.lineinfile:
        dest: "{{ bsd_nagios_conf_path }}/nagios.cfg"
        regexp: ^\s*#*\s*cfg_dir\s*=\s*{{ item.cfg_dir }}\s*$
        line: cfg_dir={{ item.cfg_dir }}
        backup: "{{ bsd_nagios_backup_conf }}"
      loop: "{{ bsd_nagios_cfg_dirs }}"

    - name: "Conf:cfg_dir: Remove options cfg_dir from nagios.cfg"
      when: not item.present | d(true)
      ansible.builtin.lineinfile:
        dest: "{{ bsd_nagios_conf_path }}/nagios.cfg"
        regexp: ^\s*#*\s*cfg_dir\s*=\s*{{ item.cfg_dir }}\s*$
        line: "# cfg_dir={{ item.cfg_dir }}"
        backup: "{{ bsd_nagios_backup_conf }}"
      loop: "{{ bsd_nagios_cfg_dirs }}"

- name: Read objects from files in directory bsd_nagios_objects_dir
  block:

    - name: "Conf:cfg_dir: Find files in {{ bsd_nagios_objects_dir }}"
      delegate_to: localhost
      register: result
      ansible.builtin.find:
        paths: "{{ bsd_nagios_objects_dir }}"
        patterns: "*.{{ bsd_nagios_objects_dir_extension }}"

    - name: "Conf:cfg_dir: Debug result bsd_nagios_debug={{ bsd_nagios_debug }}"
      when: bsd_nagios_debug | bool
      ansible.builtin.debug:
        msg: "{{ result | json_query('files[].path') }}"

    - name: "Conf:cfg_dir: Read vars"
      ansible.builtin.include_tasks: conf/nagios_vars.yml
      loop: "{{ result | json_query('files[].path') }}"

    - name: "Conf:cfg_dir: List bsd_nagios_objects bsd_nagios_debug={{ bsd_nagios_debug }}"
      when: bsd_nagios_debug | bool
      ansible.builtin.debug:
        var: bsd_nagios_objects

- name: Configure objects from variable bsd_nagios_objects
  block:

    - name: "Conf:cfg_dir: Remove nagios objects files"
      when: bsd_nagios_objects_recreate | bool
      ansible.builtin.file:
        state: absent
        dest: "{{ item.file }}"
      loop: "{{ bsd_nagios_objects }}"
      loop_control:
        label: >
          {{ item.file | dirname | basename }}
          {{ item.file | basename }}

    - name: "Conf:cfg_dir: Configure nagios objects"
      notify: [verify nagios, reload nagios]
      ansible.builtin.blockinfile:
        dest: "{{ item.0.file }}"
        mode: "{{ item.0.mode | d(omit) }}"
        marker: "# {mark} ansible managed block [{{ item.1.template }}: {{ item.1.name }}]"
        state: "{{ item.1.state | d('present') }}"
        block: "{{ lookup('template', item.1.template) }}"
        create: true
        backup: "{{ bsd_nagios_backup_conf }}"
      loop: "{{ bsd_nagios_objects | subelements('objects') }}"
      loop_control:
        label: >
          {{ item.0.file | dirname | basename }}
          {{ item.0.file | basename }}
          {{ item.1.template }}: {{ item.1.name }} {{ item.1.state }}

# Note: Validate does not work. Optional path to config not available.
# validate: "{{ bsd_nagios_program }} -v %s"
# msg: 'failed to validate: rc:1 error:'

# EOF
